Title      : Codataに関して
Title Note : (last update: &updated;)
updated: 2022-04-26T13:45

[INCLUDE=preamble]

[TITLE]

<!-- [TOC] -->

~ abstract
Codataが何なのか、どんな応用ができるかを探る。
まず論文や記事を読み、それを整理する。

整理している所感としては、codataは新しい概念というよりは、（誰もが知っている/使っている）概念を丁寧に切り取ったものに見える。
プログラミングやプログラミング言語への綺麗な応用を探りたい。その中で既存のOOPLの機能や高度な型システムとの連携があるだろうと期待する。
というのは、codataは概念としての側面が大きいと思っていて、それ単体では理解している人しかプログラミングに役立てられないから。
それはそれでアリだけど、機能として旨味を出すことで応用が進むと思う。ある程度抽象化しないといけないから（要出典）言語機能やフレームワークとして提供してはいかがか、と思っている。
~


~ yak
言語として機能を提供するのは割と良くない策だと思う。
なんでも出来てしまうので（強すぎる仮定を置けるので）主張のインパクトが弱い。
フレームワークもそう。独特な言語/フレームワークは誰しも学びたくない。

できるだけ勉強せずに使えるツールが良いのだろう。
~

# サーベイ

[Zachary J. Sullivan](https://zachsully.com/home.html)
が下の二つの論文の（第二）著者。他にも面白そうな論文を書いている。要チェック。

## Codata in Action

### 途中メモ

- data/codataの定義の仕方が良い。宣言を項から分離して明示的に扱うのがなかなか。
- 宣言を含んだプログラムをしっかり議論せずに、項や型の意味論に対する宣言の影響を宣言的に主張している。
  議論するべきところに集中できてよい。

### 読んだ後の振り返り

読んだ。data - codata の対応を型規則や意味論、相互変換を通じて説明する論文だった。
なんとなくわかった気はするけど、しっかりわかった気はしない。

codataと無限サイズの関係がピンときていない？
codataがオブジェクトのようなものである、みたいな直感は得られた。
オブジュエクとのような、というのは、codataはそれを定義するメソッド（destructor）でしか操作できないということ。dataはパターンマッチで種類を選択しつつ構成するデータを抽出する。その後に、一般的な式がその抽出したデータを使った計算として振る舞う。
対してcodataではパターンマッチも抽出もなくて、なんなら一般的な式もなくて、ただdestructorを呼ぶ。destructorの種類はあらかじめ決められていて、引数を渡すこともできる。デストラクトの継続では、その結果を使う。

## 

## Typestates for Objects

[link to the publication](https://www.microsoft.com/en-us/research/publication/typestates-for-objects/)

### 読む前の印象

この論文は線形型とかでpre/post-condition of objectsを書いたり管理したりできるようにしてそう。
割とHoare logic的な感じがして生で使うには辛みがありそう。Session typeっぽさがありそう。

# ノート

Golangの1.18以前のinterfaceはcodata++だと思おう。埋め込みが特殊だけど、そこは便利な拡張だと思えば大体goのinterfaceはcodataだと言って良いと感じた（型システムにもエンジニアリングが必要か、どのオブジェクトにどのcodata型を付けるかの判定をダックタイピングでやるのは非自明なはず）。
1.18で具体型を指定できるようにして、型制約としての使い方が始まった。これからどういう扱いをされていくのかが楽しみ。

