Title  : リアクティブプログラミングのサーベイ

[INCLUDE=preamble]

[TITLE]

# 論文リスト

- [A Survey on Reactive Programming](https://dl.acm.org/doi/abs/10.1145/2501654.2501666?casa_token=6O18dg3f5d0AAAAA:wdgWP6esK0K6OCtSZ1CpHOW4mNguMywPQAt2j3SW7zo58k351VdCTAQrhJ1mUm3JDnVipLtM86Y_C_Q)
  - サーベイ論文 (2013)
  - 軽く読んだ
-  [The Art of the Meta Stream Protocol: Torrents of Streams](https://programming-journal.org/2022/6/2/)
  - RPの拡張性の乏しさにフォーカスした論文 (2020)
  - じっくり読みかけ

## A Survey on Reactive Programming

コンテンツは大体以下な感じ。

- RPとは
- RPをサポートする言語の機能/性質を列挙
- 言語を横断的に上の性質で評価

関数型が良さそうだということと、分散したときのcoherencyが難しいということがわかる。
LINQとかElmとかには触れていなくて、論文になってないものは調査対象にしなかったのかしらという感じ。
ちょっと古いのがネック。

# 疑問、アイデア

## 代数的エフェクトでRPの機能を隠蔽/パラメタライズ

サーベイ論文を読んだところ、リアクティブのための機能は言語に備わっていてプログラマはそのフレームワークに基づいたプログラムを書く。
それらの機能はeventとかbehaviorと名前がついていて、それ用の値として表現される。それらを適切なレベルのオペレータで操作する。
その操作の設計がプログラマの仕事。どんなオペレータがどんな振る舞いをするかは割と「低水準」な話で言語設計者の腕の見せ所な印象を受けた。
(こんな感じの主張を2個目の論文が問題提起としてしている気がする)

この設計は美しくないと思っていて、言語が提供するオペレータが大粒すぎると感じている（これがDSLとしてRPが提供される由縁だと踏んでいる）。

僕が思う綺麗な設計はこんなイメージ:
言語が提供するのはもっと低レベルなもので良くて、まず、ソケットとかRPCとかを提供する。
それに加えて、フレームワークのインターフェースみたいなものをRPを提供する上では定義して、プログラマはそのインターフェースを信用して
リアクティブなプログラムを書く。そして適切なフレームワークの実装を使う。
RPライブラリ提供者はインターフェースを守った実装を与える。

一般的すぎるだろうか。
このアプローチで難しそうなところは言語が提供する低レベルな機能の実装や設計と、インターフェースを提供するための機構。
低レベルな機能は僕の勉強不足で想像つかないけど、インターフェースは代数的エフェクトでいい感じにならないかと踏んでいる。
インターフェースは部分的に型で、大体は自然言語で記述されることになると思う。
