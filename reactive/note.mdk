Title      : リアクティブプログラミングのサーベイ
Title Note : (last update: &updated;)
updated: 2022-04-21T02:21

[INCLUDE=preamble]

[TITLE]

<!-- [TOC] -->

~ abstract
特に分散実行や意味論の分離（push/pullをライブラリにハードコードする必要性はないなど）が気になる。 具体的な調査メモはnote.mdkに。密かに代数的エフェクトと絡められないかと、淡く期待している。

リアクティブプログラミング自体に興味があったわけではないことに気がついた（手法の一つとして関心はあるが）。

おそらく肝は、分散でリアクティブなこと。
分散なだけではそんなに気にならなくて、GPGPUを用いた構成の科学技術計算やdynasorみたいな技術にはそこまで関心を持たなかった。
別に高速化したいわけではない。多分ネットワークを介するような分散に興味がある。
分散というよりリモート？

リアクティブなことには分散抜きにしても割と興味があると思う。
ただ、RP単体にはそこまでで、一般化すると面白そうと思うだけ。
RPを見ていると、「そういうアプリがあっても面白いかも」と思うし、
実現方法は知りたいと思う。（スプレッドシートの実装は気になる）
でもその程度で、覗いてみたいけど入ってみたいとは思わないというか、理解してもそれ以上のものを見つけられる気がしなささそうに感じる。
より一般に、リアクティブな振る舞いをどのように実現するか、どのように記述させるかには興味がある。その一つとしてRPに興味があった。

分散とリアクティブの共存は多分難しさが色々あって、RPに限らず色々な研究がされている。
~

# 文献リスト

- [A Survey on Reactive Programming](https://dl.acm.org/doi/abs/10.1145/2501654.2501666?casa_token=6O18dg3f5d0AAAAA:wdgWP6esK0K6OCtSZ1CpHOW4mNguMywPQAt2j3SW7zo58k351VdCTAQrhJ1mUm3JDnVipLtM86Y_C_Q)
  - サーベイ論文 (2013)
  - 軽く読んだ
  - サーベイの対象が均等ではない感じがして、アカデミアによっている？
-  [The Art of the Meta Stream Protocol: Torrents of Streams](https://programming-journal.org/2022/6/2/)
  - RPの拡張性の乏しさにフォーカスした論文 (2020)
  - ざっくり読んだ
- (now reading) [Streams a la carte: Extensible Pipelines with Object Algebras](https://drops.dagstuhl.de/opus/volltexte/2015/5239/)
  - Streaming library の拡張性のなさに嘆いて object algebra を用いてなんとかする論文 (2015)
  - 上の論文で関連研究として紹介されていた論文
- (now reading) [Topology-level Reactivity in Distributed Reactive Programs: Reactive Acquaintance Management using Proximity Sets](https://researchportal.vub.be/en/publications/topology-level-reactivity-in-distributed-reactive-programs-reacti)
  - ネットワークでRP
  - タイトルの通り、処理への参加/不参加がダイナミックなことが課題で、それについてreactiveにすること（topology levelでreactive）が目的
  。
- [The Essence of FRP](https://begriffs.com/posts/2015-07-22-essence-of-frp.html)
  : FRP はオリジナルの意味を失ってしまった、という発表。
  元々（20年くらい前）は定義があったのだけれど、いろんな意味で使われるようになって、今やFRPと呼ばれるものは元々の定義を大体満たさなくなった。
  連続的な（離散的でない）時間を扱い、その意味は純粋に決まっていた。なので並列実行しても決定的だったとか。
  観測（近似）はFRPプログラムの末端にあって、時間に直接支配される部分は別に書かれる。遅延評価な言語で書くとそういう分離がスッキリ書ける。
- [What is (functional) reactive programming? (stack overflow)](https://stackoverflow.com/questions/1028250/what-is-functional-reactive-programming/1030631#1030631)
  : FRPは何かという問いとそれに対する回答。上の公演をした人が回答している。真偽の程は僕にはわからないけど、論調はそれらしいのでとりあえず僕は信じている。要約がいらない文章なのでここには内容を書かない。(メモ: behavior, values over timeが第一級)
- [Push-Pull Functional Reactive Programming](http://conal.net/papers/push-pull-frp/)
  : 
- [FRP: Haskell wiki](https://wiki.haskell.org/Functional_Reactive_Programming#History)
  : 短くて良い。
    97年のICFP論文でoriginal formulationが与えられたとか。
    実装の話はしなくて、便利な面の表層だけをさらった感じ。
    Diffの対象がRPではなく、コールバックとかを使う実装。いわゆるRPとは? という気持ちになる。
- [Reactive Programming (wikipedia)](https://en.wikipedia.org/wiki/Reactive_programming)
  : 英語ページがなかなか良さげに書かれている。
  余談だが、pdf出力機能がいい。デフォルトで印刷に適した余白がつく。論文もこのくらいにして欲しい。
- [入門: Kubernetes]()
  : まずはここが大事か。Kubernetesで何ができて何ができないか。
- [Developing reactive Microservices with Quarkus](https://ibm.github.io/workshop-quarkus-openshift-reactive-messaging/images/ReactiveMicroservices.pdf)
  : Quarkus という Kubernetes みたいな container management platform でRPもできるJavaライブラリの紹介。RPはメインではないけど一つの大きな応用例として。
  Graal/VMコンパイラでJavaコードをネイティブコンパイルしてしまうらしい。コンパイル時に頑張ることで、起動時間を縮めたのだとか。
- [WebAssembly meets Kubernetes with Krustlet](https://cloudblogs.microsoft.com/opensource/2020/04/07/announcing-krustlet-kubernetes-rust-kubelet-webassembly-wasm/)
  : WASM をKubernetesでDockerを介さずに実行するプロジェクト(Krustlet) の紹介記事。開発者が書いていそう。
  別にDockerのコンテナを使うスタイルを駆逐するわけではなく、選択肢を増やす感じだとか。K8sPod(ノード)としてOS環境を使いたいか、WASMバイナリを使いたいかによって選択する。利点欠点はそれぞれあるけど、WASMの方が小粒？(そうとも限らないかも)

文献ではないけど、関連していそうな言語。

- Elm言語 : インタラクティブなWebアプリを作るときに便利。関数型でフロントエンドをかける。Haskellに影響されていて、実行モデルが有名（Elmモデルと確か呼ばれていて、ReactのReduxに影響を与えている）。JSがコンパイルターゲット
- Elixir言語 : 並列化が得意。たくさんプロセス（OSのプロセスではなく、もっと軽量な独自の実行単位）を作る。アクターみたいな感じ。関数型だけど型はそこそこ。Juliaくらいの型付けな印象。シンタックスともう少し深いところまでRubyに啓発されてそう。Erlangを書きやすくしたものだとか。
  - 上であげた二つ目の論文ではElixirにEDSLを定義する

## A Survey on Reactive Programming

コンテンツは大体以下な感じ。

- RPとは
- RPをサポートする言語の機能/性質を列挙
- 言語を横断的に上の性質で評価

関数型が良さそうだということと、分散したときのcoherencyが難しいということがわかる。
LINQとかElmとかには触れていなくて、論文になってないものは調査対象にしなかったのかしらという感じ。
ちょっと古いのがネック。

### 疑問

RPはなかなか双方向性をサポートできていないと言って、future work的なものとしてあげていたが、それは制約プログラミングと何が異なるのか。制約プログラミングがすでに存在する中で、RPにどのような方向への発展が期待されているのか。
rule based な言語があるとか（ampersand-- relational algebra based）。

## The Art of the Meta Stream Protocol: Torrents of Streams

課題として、既存のRP言語/フレームワークはnon-functionalな記述をうまくできないとか統一的な命令がないことを挙げている。Functionalな記述として`map`とか`filter`みたいなものをあげていて、non-functionalな記述としてpush/pull評価戦略やバッファの設定とかをあげていた気がする。

この論文ではCreekというElixirのEDSLを定義してそのコンパイル/評価の環境も与える。
メタプログラミングでプログラマが定義したDAG(mapとかfilterの合成で作られたやつ)を編集できる。割とガッツリメタプログラミング。
使う技術は[structural intercession](https://dl.acm.org/doi/10.1145/1028976.1029004)だとか。説明なしに話が進む。件の論文をあたっていないのでもやもや。
残念なことにstructural intercessionとかメタプログラミングを採用した動機は書かれていない。
こういうAST操作を提供すると書かれているだけ。

## Streams a la carte: Extensible Pipelines with Object Algebras

push/pull semanticsなどの性質をフレームワークの定義から分離する（ハードコーディングを避ける）話。
もともとpush/pullを選べるようにすることが動機だったみたいで、そこから目的を一般化したとのこと（c.f., Section 3.1）。
Object algebra という概念を（抽象化技法）を使っている。このalgebraはalgebraic effectのalgebraと同じだろうか（表面的には似ているように見える）。

言語に対する要求が高くて、type operator多相を要求する。つまり`list<int>`とか`array<int>`とかを抽象化できる多相性。
Kokaにはなかった気がする。入れるためにはカインド制約をいい感じにするのが大変そうだろうか？

Functional なことをJava8でやっていて読むのが大変。メモ:

```
Push<T>     ~ { invoke: Consumer<T> -> () }
Consumer<T> ~ { accept: T -> () }
```

`Consumer`は`Push`の継続だと思って良いとか。ちなみに、`Push`はpush semanticsなストリームを表す型パラメータ（ジェネリックなクラス）で
invokeに継続を渡して呼び出すことでstreamを流す（継続を再開する）。`map`の実装はそんな再開をλで包んで、パラメータの関数をframeとして差し込むようなもの。最適化しようと思うとdefunctionalizationとかが効く？

~ yak
Defunctionalizationと書いたけど、あまり理解していなかったので調べた (and メモ)。

- 月曜日の<Programming>での講演でCPS -> _defunctionalization_ with associativity みたいな話があった。
- [Defunctionalization: Everybody Does It, Nobody Talks About It](https://blog.sigplan.org/2019/12/30/defunctionalization-everybody-does-it-nobody-talks-about-it/)
  - SIGPLAN のブログ記事。良い。
~

Figure 3の`map`実装を頑張って読んだのでメモ。Javaのイテレータのやり方に従っていると論文では書かれていた（けど僕はそれを知らない）。
(自然言語で説明されていた、僕がそれを理解できなかっただけ)。
返す`Pull<R>`は三つのメンバを持つオブジェクトで、このmapが出力する次の値`next : R`と`hasNext : () -> bool`、そして`next : () -> R`。
`next()`を呼ぶ前には必ず`hasNext()`を呼ぶように設計されている。例えば二回連続で`next()`を呼ぶのは間違った使い方。`hasNext`を呼ぶと、`map`元の`Pull<T>`ストリームから次の要素を取得して`this.next`に保存する。そして`next()`を呼ぶと`this.next`を結果として返しつつ、`this.next = null`する。ちなみに`next()`を呼んだ際に`this.next`が`null`だと例外を投げるので二回続けて`next()`を呼ぶと例外が生じる。



## Topology-level Reactivity in Distributed Reactive Programs: Reactive Acquaintance Management using Proximity Sets

発表を聞いたときのメモ:

- FRPとreactive streamで大まかに分類できる
- open networkに対して分散rpをできるようにしたい。難しさ:
  - device の個数がわからない
  - join/leaveが気まま

- acquaintance discovery
- acquaintance maintain
  - application-level reactivity
  - topology-level reactivity

~ naoya
FRP v.s. reactive streamの捉え方はなるほどと感じた。
まだまだreactive programmingがなんなのかを掴みきれていない感じがする。たくさん例をあたろう。
関連してstreamが何なのか区別があまりつかない。シーケンシャルなことはわかる。
長さが無限というか静的なデータ構造ではないイメージがある。そもそも曖昧な言葉？
~

# 疑問、アイデア

だいぶ思いつきで書いていて、主張はまとまっていない。無意味なアイデアかもしれないし、既存の研究があるかもしれない。

## 代数的エフェクトでRPの機能を隠蔽/パラメタライズ

サーベイ論文を読んだところ、リアクティブのための機能は言語に備わっていてプログラマはそのフレームワークに基づいたプログラムを書く。
それらの機能はeventとかbehaviorと名前がついていて、それ用の値として表現される。それらを適切なレベルのオペレータで操作する。
その操作の設計がプログラマの仕事。どんなオペレータがどんな振る舞いをするかは割と「低水準」な話で言語設計者の腕の見せ所な印象を受けた。
(こんな感じの主張を2個目の論文が問題提起としてしている気がする)

この設計は美しくないと思っていて、言語が提供するオペレータが大粒すぎると感じている（これがDSLとしてRPが提供される由縁だと踏んでいる）。

僕が思う綺麗な設計はこんなイメージ:
言語が提供するのはもっと低レベルなもので良くて、まず、ソケットとかRPCとかを提供する。
それに加えて、フレームワークのインターフェースみたいなものをRPを提供する上では定義して、プログラマはそのインターフェースを信用して
リアクティブなプログラムを書く。そして適切なフレームワークの実装を使う。
RPライブラリ提供者はインターフェースを守った実装を与える。

一般的すぎるだろうか。
このアプローチで難しそうなところは言語が提供する低レベルな機能の実装や設計と、インターフェースを提供するための機構。
低レベルな機能は僕の勉強不足で想像つかないけど、インターフェースは代数的エフェクトでいい感じにならないかと踏んでいる。
インターフェースは部分的に型で、大体は自然言語で記述されることになると思う。

ちなみにreactive programmingとeffect handlersを組み合わせた論文はなさげ。

- 代数的エフェクトで実装すること
- それによって綺麗なライブラリデザインが実現できること
- 既存フレームワークにない設定の提供

が貢献として出せそう。

文献 [#paper:obj-alg] を代数的エフェクトに移植する形で実現できないだろうか。

## 分散実行のためのフレームワークとしてRP

これはElixir?
ネットワークを介した分散処理にRPを使うと楽しいのではないだろうか。
細かい条件とか難しさは全然考えられていないが、高水準な記述で分散処理を書くためにRPは良い記述に感じる。
何を書きたくて、何を書かずに済ませたいか、何を頻繁に変更したいかなどを観察する。

まず、各ノード内で行われる計算は普通にかけたい。
この時に必要になる分散処理に特化した概念は通信で、通信に対してリアクティブに反応できると嬉しい。
通信の方法と内部処理は分離されて、ノードではコントローラがそれらをつなぎ合わせるような設計はどうだろうか。
そうすると、内部処理は参照等価な関数みたいなものだと思えて

Kubernetesみたいな技術があって、機能が競合するのかなと思う。
Dockerと組み合わせて使うのが流行っているみたい（マイクロサービスアーキテクチャ）。
分散RPみたいに言語の機能でなんとかする流派とKubernetesみたいな技術で言語の外でなんとかする流派の違いなのかなと想像する。
まず、この想像は正しいのか、reifyするとどう言えるかを知りたい。
棲み分けがされているならそれを知りたいし、されていないならどうできそうか考えるのは考えるのは楽しそう。
完成度の違いも気になる。

棲み分けはやはりありそうで、式とかのレベルでノードを設定したいのか、アプリケーションのレベルでノードを作りたいのかによって使い分けることになりそう。
リアクティブプログラミングは非同期なプログラムを綺麗に書くために使えるのに対して、Kubernetesはリソースを分散させるのに使える（役に立つ、適している？）。
分散性はKubernetesの方が得意そう、というかRP界隈では何を問題にするべきか捉えきれていないor言語や使う文脈依存で方向性が定まらない感じがする。
面白そうではあるが。

(ある程度調べた)

多分上の観察はそんなに間違ってなくて、`Kubernetes reactiveっぽい言葉`で検索すると、それらしい記事がたくさん出てくる。
それらで機能の使い分けがどうなされているかをこれから調べたい。

## いろんな分散実行とRP

多分、分散実行にも色々あってそれぞれRPとの相性とか、適切な抽象化とかが異なるのだろう。
リアクティブな分散アプリケーションにはどんなものがあって、開発とか実行とかのタイミングでどんな性質が求められる/求められないか。
それらの要求はどんな技術(言語とかフレームワークとか)で解決されるのが綺麗か。

## なぜRPか

Reactive applicationを人類は欲していて、それを実装する方法は色々ある。RPはそのための一つの手段に過ぎない。ではいつRPが有効か？

具体的に何がRP以外の手段として存在するかは具体的にどんなアプリケーションをリアクティブだと思うかによる気がするけど、例えばKanonはリアクティブなアプリだと僕は思っていて、その実装はみなさんご存知の通り（少なくとも僕から説明することはない）。
Kanonの実装にRPLを使ったら楽できるだろうか、は気になる。高橋くんがincremental computationを気にしていたのはこのあたりの話だろうと思う。
いかがか？ 

- RPはincremental computationをするものだと思える（はず）
- 何か議論の末、Kanonには適さないことが分かったらしい。
- どうして適さないのか？

あるいは、Elixirみたいな言語でKanonとか実装したら気持ち良いだろうか。(これは気持ち良いかも)
これを検証するための知識を今の僕は提供できないけど。

Kanonの話に限らずRPをいつ使うかみたいな判断が欲しい。

# まとめ、分類

横断的に（気の向くままに）reactive programming 関連の話題を漁ってきた。
ここでは見てきたコンテンツにストーリーを与えて、セミナーで話しやすくする。

それぞれのトピックはわりかし独立しているように思う。


## general prepuce RP

まずは有名どころから。

### FunctionalなRPライブラリ

産業界で市民権を得ているのはこれら？

- ReactiveX
  - functional なインターフェース (Observable) を提供する
  <!-- - Pull ベースな意味 -->
  - 色々なOOPLで実装されていて、実装言語ごとに用途が異なっていいとか、実際に異なるとか。
  - 意味的には割とスタンダードか
- Akka, REScala, Quarkus, LINQなどの機能は割とこのあたりか。
  - もちろんそれぞれ個性があって、包含関係はないはず

意味論の議論は枯れている？

### RP language

Elm はWeb開発のため。React に影響を与えるなど (Reactのことはよく知らない）。

- Elm (for WEB app)
- Elixir (IDK about it)

## original FRP

- FRP is not just a functional RP
  - 今やこの発言は過激派に見える
  - 時間（実数でモデルされる時間）を引数に取る関数としての、reactive valueを上手に扱えるのが売り。
  - 詳しくは知らない。Haskell。
- 蓮尾先生の講演で実数が絡んだCPSに関する検証の話を聞いた気がする。何かを完備化すると上手く検証できたとかなんとか？

## (meta) reactive programming framework

context: RP as stream processing with map, filter, and so on.
suggest: parameterize the framework so that cleanly switch the behavior of framework

- object algebra
  - こんな記述がRXJavaに: non-opinionated about the source of concurrency (threads, pools, event loops, fibers, actors, etc.)
- meta-stream なんとか (programming)
- might be possible: algebraic effects and handlers
  - 簡単ではないと思うけど、なんとかなる気はする。継続やストリームの表現を上手に扱う必要がきっとあって、もしかしたら気持ちの良い実装や理論的な議論をできるかもしれない。

## RP by actor

Actorモデル（なんなのかをよく理解していない）はRPを実現するために便利なようで、色々な研究がこれにのっかている。
分散性が絡む話に多い気がする。Actorが何か、どうしてactorかは今後の課題or誰か教えてくれないだろうか。

- <Programming2022> のtopology level reactive の研究ではElixirにのっかていた。DSLを定義して、それをElixirだったかErlangだったかにコンパイルすると言っていた気がするのだけど、そのDSLの登場人物にactor（とreactor）がいた。
- 渡辺卓雄先生もactorを使ってRP言語を研究されている（いた？）。
- Elixir, Erlang
  - 組み込みに向いているとか

鍵は分散と組み込み？つまりCPS？

## Reactive architecture

上のactorの話はKubernetesとの棲み分けが気になる。
つまり、言語レベルでのサポートではなくコンテナマネージではではいけないか？
どう棲み分けるか。

Kubernetes はコンテナをいい感じにスケールしてくれるソフトウェアで、宣言的な設定を書いてコンテナを渡して実行すると
コンテナの起動とかをいい感じにやってくれるらしい。理解がとてもとても浅いので勉強が必要。
Kubernetesをラズパイにインストールして上手に実行する、みたいな話もあるようで、ネットワークの状況に応じて、
K8sが上手に仕事するみたいなことをオライリー本で読んだ。似たような話をtop-level-reactiveで見た気がする。
違いを明確に理解したい。

ちなみにK8sでコンテナではなくWASMを実行する動きがある。これが入ると議論は変わるだろうか。
