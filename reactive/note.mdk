Title      : リアクティブプログラミングのサーベイ
Title Note : (last update: &updated;)
updated: 2022-04-14T18:59

[INCLUDE=preamble]

[TITLE]

<!-- [TOC] -->

# 文献リスト

- [A Survey on Reactive Programming](https://dl.acm.org/doi/abs/10.1145/2501654.2501666?casa_token=6O18dg3f5d0AAAAA:wdgWP6esK0K6OCtSZ1CpHOW4mNguMywPQAt2j3SW7zo58k351VdCTAQrhJ1mUm3JDnVipLtM86Y_C_Q)
  - サーベイ論文 (2013)
  - 軽く読んだ
-  [The Art of the Meta Stream Protocol: Torrents of Streams](https://programming-journal.org/2022/6/2/)
  - RPの拡張性の乏しさにフォーカスした論文 (2020)
  - ざっくり読んだ
- (now reading) [Streams a la carte: Extensible Pipelines with Object Algebras](https://drops.dagstuhl.de/opus/volltexte/2015/5239/)
  - Streaming library の拡張性のなさに嘆いて object algebra を用いてなんとかする論文 (2015)
  - 上の論文で関連研究として紹介されていた論文
- (now reading) [Topology-level Reactivity in Distributed Reactive Programs: Reactive Acquaintance Management using Proximity Sets](https://researchportal.vub.be/en/publications/topology-level-reactivity-in-distributed-reactive-programs-reacti)
  - ネットワークでRP
  - タイトルの通り、処理への参加/不参加がダイナミックなことが課題で、それについてreactiveにすること（topology levelでreactive）が目的
  。

文献ではないけど、関連していそうな言語。

- Elm言語 : インタラクティブなWebアプリを作るときに便利。関数型でフロントエンドをかける。Haskellに影響されていて、実行モデルが有名（Elmモデルと確か呼ばれていて、ReactのReduxに影響を与えている）。JSがコンパイルターゲット
- Elixir言語 : 並列化が得意。たくさんプロセス（OSのプロセスではなく、もっと軽量な独自の実行単位）を作る。アクターみたいな感じ。関数型だけど型はそこそこ。Juliaくらいの型付けな印象。シンタックスともう少し深いところまでRubyに啓発されてそう。Erlangを書きやすくしたものだとか。
  - 上であげた二つ目の論文ではElixirにEDSLを定義する

## A Survey on Reactive Programming

コンテンツは大体以下な感じ。

- RPとは
- RPをサポートする言語の機能/性質を列挙
- 言語を横断的に上の性質で評価

関数型が良さそうだということと、分散したときのcoherencyが難しいということがわかる。
LINQとかElmとかには触れていなくて、論文になってないものは調査対象にしなかったのかしらという感じ。
ちょっと古いのがネック。

## The Art of the Meta Stream Protocol: Torrents of Streams

課題として、既存のRP言語/フレームワークはnon-functionalな記述をうまくできないとか統一的な命令がないことを挙げている。Functionalな記述として`map`とか`filter`みたいなものをあげていて、non-functionalな記述としてpush/pull評価戦略やバッファの設定とかをあげていた気がする。

この論文ではCreekというElixirのEDSLを定義してそのコンパイル/評価の環境も与える。
メタプログラミングでプログラマが定義したDAG(mapとかfilterの合成で作られたやつ)を編集できる。割とガッツリメタプログラミング。
使う技術は[structural intercession](https://dl.acm.org/doi/10.1145/1028976.1029004)だとか。説明なしに話が進む。件の論文をあたっていないのでもやもや。
残念なことにstructural intercessionとかメタプログラミングを採用した動機は書かれていない。
こういうAST操作を提供すると書かれているだけ。

## Streams a la carte: Extensible Pipelines with Object Algebras

push/pull semanticsなどの性質をフレームワークの定義から分離する（ハードコーディングを避ける）話。
もともとpush/pullを選べるようにすることが動機だったみたいで、そこから目的を一般化したとのこと（c.f., Section 3.1）。
Object algebra という概念を（抽象化技法）を使っている。このalgebraはalgebraic effectのalgebraと同じだろうか（表面的には似ているように見える）。

言語に対する要求が高くて、type operator多相を要求する。つまり`list<int>`とか`array<int>`とかを抽象化できる多相性。
Kokaにはなかった気がする。入れるためにはカインド制約をいい感じにするのが大変そうだろうか？

## Topology-level Reactivity in Distributed Reactive Programs: Reactive Acquaintance Management using Proximity Sets

発表を聞いたときのメモ:

- FRPとreactive streamで大まかに分類できる
- open networkに対して分散rpをできるようにしたい。難しさ:
  - device の個数がわからない
  - join/leaveが気まま

- acquaintance discovery
- acquaintance maintain
  - application-level reactivity
  - topology-level reactivity

~ naoya
FRP v.s. reactive streamの捉え方はなるほどと感じた。
まだまだreactive programmingがなんなのかを掴みきれていない感じがする。たくさん例をあたろう。
関連してstreamが何なのか区別があまりつかない。シーケンシャルなことはわかる。
長さが無限というか静的なデータ構造ではないイメージがある。そもそも曖昧な言葉？
~

# 疑問、アイデア

だいぶ思いつきで書いていて、主張はまとまっていない。無意味なアイデアかもしれないし、既存の研究があるかもしれない。

## 代数的エフェクトでRPの機能を隠蔽/パラメタライズ

サーベイ論文を読んだところ、リアクティブのための機能は言語に備わっていてプログラマはそのフレームワークに基づいたプログラムを書く。
それらの機能はeventとかbehaviorと名前がついていて、それ用の値として表現される。それらを適切なレベルのオペレータで操作する。
その操作の設計がプログラマの仕事。どんなオペレータがどんな振る舞いをするかは割と「低水準」な話で言語設計者の腕の見せ所な印象を受けた。
(こんな感じの主張を2個目の論文が問題提起としてしている気がする)

この設計は美しくないと思っていて、言語が提供するオペレータが大粒すぎると感じている（これがDSLとしてRPが提供される由縁だと踏んでいる）。

僕が思う綺麗な設計はこんなイメージ:
言語が提供するのはもっと低レベルなもので良くて、まず、ソケットとかRPCとかを提供する。
それに加えて、フレームワークのインターフェースみたいなものをRPを提供する上では定義して、プログラマはそのインターフェースを信用して
リアクティブなプログラムを書く。そして適切なフレームワークの実装を使う。
RPライブラリ提供者はインターフェースを守った実装を与える。

一般的すぎるだろうか。
このアプローチで難しそうなところは言語が提供する低レベルな機能の実装や設計と、インターフェースを提供するための機構。
低レベルな機能は僕の勉強不足で想像つかないけど、インターフェースは代数的エフェクトでいい感じにならないかと踏んでいる。
インターフェースは部分的に型で、大体は自然言語で記述されることになると思う。

ちなみにreactive programmingとeffect handlersを組み合わせた論文はなさげ。

- 代数的エフェクトで実装すること
- それによって綺麗なライブラリデザインが実現できること
- 既存フレームワークにない設定の提供

が貢献として出せそう。

文献 [#paper:obj-alg] を代数的エフェクトに移植する形で実現できないだろうか。

## 分散実行のためのフレームワークとしてRP

これはElixir?
ネットワークを介した分散処理にRPを使うと楽しいのではないだろうか。
細かい条件とか難しさは全然考えられていないが、高水準な記述で分散処理を書くためにRPは良い記述に感じる。
何を書きたくて、何を書かずに済ませたいか、何を頻繁に変更したいかなどを観察する。

まず、各ノード内で行われる計算は普通にかけたい。
この時に必要になる分散処理に特化した概念は通信で、通信に対してリアクティブに反応できると嬉しい。
通信の方法と内部処理は分離されて、ノードではコントローラがそれらをつなぎ合わせるような設計はどうだろうか。
そうすると、内部処理は参照等価な関数みたいなものだと思えて

