{
  "displayName": "Kokax",
  "name": "kokax",
  "mimeTypes": ["text/x-koka"],
  "fileExtensions": ["kk","kki"],
  
  "editorOptions": { "tabSize": 2, "insertSpaces": true },
  

  "lineComment":      "//",   
  "blockCommentStart": "/*",
  "blockCommentEnd":   "*/",

  "keywords": [
    "infix", "infixr", "infixl", 
    "type", "cotype", "rectype", "alias", "struct", "enum", "con","abstract",
    "fun", "function", "val", "var", "external",
    "if", "then", "else", "elif", "return", "match",
    "forall", "exists", "some", "with", "in",
    "private", "public", "private",
    "module", "import", "as",
    "=", ".", ":", ":=", "->", "=>",
    "include", "inline","rec",
    "interface", "instance", 
    "effect","morphism","handler","with","handle",
    "js","resource","inject","use","using","new",
    "named","name","dynamic","fresh",
    "initially", "finally",
    "implicit", "effect", "control", "noinline"
  ],

  "extraKeywords": [
  ],

  "builtins": [
    "cs", "js", "file", "ref", 
    "resume", "finalize"
  ],

  "typeKeywords": [
    "forall", "exists", "some", "with", "linear", "resource",
    "inject","in","named","dynamic"
  ],

 "extraTypeKeywords": [
  ],

 "typeStart": [
    "type","cotype","rectype","alias","struct","enum","effect","morphism","handler","inject"
  ],

  "moduleKeywords": [
    "module","import","as","qualified"
  ],

  "kindConstants": [
    "E","P","H","V","X"
  ],

  "escapes" :  "\\\\(?:[nrt\\\\\"'\\?]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{6})",
  "symbols0": "[\\$%&\\*\\+@!\\/\\\\\\^~=\\.:\\-\\?]",
  "symbols" : "(?:@symbols0|[\\|<>])+",
  "idchars" : "(?:[a-zA-Z]\\-[a-zA-Z]|\\w)*", 
  "idfinal" : "(?:\\?|'*)?",

  "tokenizer": {
    "root": [
      ["((?:[a-z]@idchars\\/)+)([a-z]@idchars@idfinal)", ["identifier.namespace","identifier"]],
      
      ["[a-z]@idchars@idfinal(?!\\/)", 
        { "cases":{ "@keywords": { 
                    "cases": { "alias|effect|morphism"  : { "token": "keyword", "next": "@alias_type" },
                             "struct" : { "token": "keyword", "next": "@struct_type" },
                             "type|cotype|rectype|inject": { "token": "keyword", "next": "@type" }, 
                             "module|as|import": { "token": "keyword", "next": "@module" },
                             "@default": "keyword" } 
                  },
                  "@extraKeywords": "keyword",
                  "@builtins": "identifier.predefined",
                  "@default" : "identifier" }
        }
      ],

      ["[A-Z]@idchars", "identifier.constructor" ],

      ["_@idchars", "identifier.wildcard"],

      
      ["([a-z]@idchars\\/)+", "identifier.namespace" ],
      
      
      { "include": "@whitespace" },
      
      ["[{}()\\[\\]]", "@brackets"],
      ["[;,`]", "delimiter"],

      
      ["[<>](?![<>|]*@symbols0)", "@brackets" ],
      ["->(?!@symbols0|[>\\|])", "keyword" ],
      ["::?(?!@symbols0)", "type.operator", "@type"],
      ["::?(?=\\?)", "type.operator", "@type"],

      
      ["@\"", { "token": "string.quote", "bracket": "@open", "next": "@litstring" } ],
      
      
      ["@symbols", { "cases": { "\\-": "operator.minus",
                              "\\.": "keyword",
                              "@keywords": "keyword.operator",
                              "@extraKeywords": "keyword.operator",
                              "@default": "operator" }}
      ],

      
      ["[0-9]+\\.[0-9]+([eE][\\-+]?[0-9]+)?", "number.float"],
      ["0[xX][0-9a-fA-F]+", "number.hex"],
      ["[0-9]+", "number"],

      
      ["\"([^\"\\\\]|\\\\.)*$", "string.invalid" ],  
      ["\"",  { "token": "string.quote", "bracket": "@open", "next": "@string" } ],
      
      
      ["'[^\\\\']'", "string"],
      ["(')(@escapes)(')", ["string","string.escape","string"]],
      ["'", "string.invalid"],
      
      
      ["^[ ]*#.*", "namespace"]
    ],

    "whitespace": [
      ["[ \\r\\n]+", "white"],
      ["/\\*", "comment", "@comment" ],
      ["//$",  "comment"],
      ["//",   "comment", "@line_comment"]
    ],

    "comment": [
      ["^\\s*[\"|]\\s*$", "comment", "@comment_docblock"],
      ["[^\\/*\"|]+", "comment" ],
      ["/\\*",  "comment", "@push" ],
      ["\\*/",  "comment", "@pop"  ],
      ["(\")((?:[^\"]|\"\")*)(\")", ["comment","comment.doc","comment"]],
      ["(\\|)((?:[^|]|\\|\\|)*)(\\|)", ["comment","comment.doc","comment"]],
      ["[\\/*\"|]", "comment"]
    ],  

    "comment_docblock": [
      ["\\*\\/|\\/\\*",  "@rematch", "@pop"], 
      ["^\\s*\"\\s*$",  "comment", "@pop"],
      ["^\\s*\\|\\s*$", "comment", "@pop"],
      ["[^*\\/]+", "comment.doc"],
      [".", "comment.doc"] 
    ],

    "line_comment": [
      ["[^\"|]*$", "comment", "@pop" ],
      ["[^\"|]+",  "comment" ],
      ["(\")((?:[^\"]|\"\")*)(\")", 
        ["comment","comment.doc", { "cases": { "@eos":  { "token": "comment", "next": "@pop" },
                                             "@default": "comment" }}]
      ],                                            
      ["(\\|)((?:[^|]|\\|\\|)*)(\\|)", 
        ["comment","comment.doc", { "cases": { "@eos":  { "token": "comment", "next": "@pop" },
                                             "@default": "comment" }}]
      ],  
      [".*$", "comment", "@pop"] 
    ],

    "string": [
      ["[^\\\\\"]+",  "string"],
      ["@escapes", "string.escape"],
      ["\\\\.",      "string.escape.invalid"],
      ["\"",        { "token": "string.quote", "bracket": "@close", "next": "@pop" } ]
    ],

    "litstring": [
      ["[^\"]+",    "string"],
      ["\"\"",       "string.escape"],
      ["\"",        { "token": "string.quote", "bracket": "@close", "next": "@pop" } ]
    ],

    
    "module": [
      { "include": "@whitespace" },
      ["([a-z]@idchars\\/)*[a-z]@idchars", 
        { "cases": { "@moduleKeywords": "keyword",
                   "@keywords": { "token": "@rematch", "next": "@pop" },
                   "@default": "identifier.namespace" }}
      ],
      ["[=]", "keyword"],
      ["","","@pop"] 
    ],

    
    "alias_type": [
      ["=", "keyword.operator"],                
      { "include": "@type" }
    ],

    "struct_type": [
      [ "\\((?!,*\\))", "@brackets", "@pop"],    
      { "include": "@type" }
    ],

    "type": [
      [ "[(\\[<]", { "token": "@brackets.type" }, "@type_nested"],
      { "include": "@type_content" }
    ],

    "type_nested": [
      ["[)\\]>]", { "token": "@brackets.type" }, "@pop" ],
      ["[(\\[<]", { "token": "@brackets.type" }, "@push"],
      [",", "delimiter.type"],
      ["([a-z]@idchars)(\\s*)(:)(?!:)",["type.identifier.typeparam","white","type.operator"]],
      { "include": "@type_content" }
    ],

    "type_content": [
      [ "  ", "white", "@pop" ],
      { "include": "@whitespace" },

      
      ["[*!](?!@symbols)", "type.kind.identifier"],                    
      ["[a-z][0-9]*(?![a-zA-Z_])", "type.identifier.typevar"],
      ["_@idchars", "type.identifier.typevar"],
      
      ["((?:[a-z]@idchars\\/)*)([a-z]@idchars)", 
        { "cases": { "@typeKeywords": ["type.identifier.namespace","type.keyword"],
                   "@extraTypeKeywords": ["type.identifier.namespace","type.keyword"], 
                   "@keywords": { "token": "@rematch", "next": "@pop" },
                   "@extraKeywords": { "token": "@rematch", "next": "@pop" },
                   "@default": ["type.identifier.namespace","type.identifier"]
        }}
      ],
      ["((?:[a-z]@idchars\\/)*)[A-Z]@idchars", "type.kind.identifier"],
      
      ["::|->|=>|[\\.:|]", "type.operator"],
      ["","","@pop"]  
    ]
  }
}